Release Notes for Version 1.0-beta-4

Release date: 2017-06-23
Intended compatibility: WSUS Offline Update version 10.9.2 and newer

This version offers the following changes:

- The obsolete script DownloadUpdates.sh and related files will be
  deleted, if they are found in the same directory as the new Linux
  scripts.

  The new Linux scripts are included in the WSUS Offline Update archive
  since changeset 866 ( http://trac.wsusoffline.net/changeset/866 ). They
  are installed into the directory wsusoffline/sh. But then the old
  scripts in the same directory, if present, should be removed.


- The Linux scripts can do an initial installation of WSUS Offline Update.

  The Linux scripts need the configuration files of a WSUS Offline
  Update installation, to calculate static and dynamic downloads. Also,
  the Linux download scripts can only replace the download part of WSUS
  Offline Update, namely the application UpdateGenerator.exe and the
  script DownloadUpdates.cmd. The client directory with the application
  UpdateInstaller.exe is needed for the installation of the updates
  on Windows.

  The Linux scripts already included a script to search for new versions
  of WSUS Offline Update and to download and install them on demand. The
  same script can now do an initial installation of the wsusoffline
  archive, if none is installed.

  To use this approach, you should create an enclosing directory
  "wsusoffline" first, which will contain both the new Linux scripts
  and the contents of the wsusoffline archive. Change to the directory
  "wsusoffline" and download and unpack the Linux scripts to this
  directory. Change to the new directory "wsusoffline/sh-new-1.0-beta-4"
  and run the script update-generator.bash. It will download and unpack
  the wsusoffline archive outside of the directory sh-new-1.0-beta-4,
  but inside the enclosing directory wsusoffline.

  This may not be the usual way to unpack an archive, but the Linux
  scripts need to be in the wsusoffline directory, not the other way
  round. Don't complain, if you litter your home directory with lots of
  new files and directories.

  The next release of WSUS Offline Update will already include the new
  Linux download scripts, and then this approach will not be necessary
  anymore, but it was a small addition to an existing file, and so it
  was implemented anyway.


- The integrity of the WSUS catalog file wsusscn2.cab is tested with
  cabextract.

  The test with cabextract -t ensures, that all files in the archive can
  be extracted. This should detect damaged archives, which are sometimes
  found in the Microsoft content delivery network after the official patch
  day on the second Tuesday each month. These files can be successfully
  downloaded, without any error indicated by wget. But the verification
  of the digital file signature with Sysinternals Sigcheck may still
  fail. Usually, these problems disappear by itself after a few days.

  Testing a damaged file with cabextract typically finds errors at the
  end of the file. An example result is shown below. The warning about
  "extra bytes at end of file" can be ignored, though.


  wsusscn2.cab: WARNING; possible 16168 extra bytes at end of file.
  Testing cabinet: wsusscn2.cab
    index.xml  OK                                2508e14227888917d2769db31ed8e1c6
    package.cab  OK                              0f7dd82ec3d6b0761cb29eb2a00675a5
    package2.cab  OK                             6698aec96565b40e4fe1b82fbb4aa2e9
    package3.cab  OK                             0eef4f5fcf236fa539da5618b1ee8325
    package4.cab  OK                             40d90c96a53883ba404399442b33f0c4
    package5.cab  OK                             740689ddd85cdd0b1183b85f5794e11f
    package6.cab  OK                             b3ca8da969ee2f96fbe3c722f41c2749
    package7.cab  OK                             ba1bbfd1d238abe3c423a8677ad3f7dd
    package8.cab  OK                             fe93c09cdc220c6b7d864007084ae930
    package9.cab  OK                             721490a2f936d2a8ca83e11c2a08a216
    package10.cab  OK                            e54853f76de0b866d0413e0243e847fd
    package11.cab  OK                            bafb3946d3d26f97ec02157ead53ff63
    package12.cab  OK                            745ec78ad5ea69737224de451679f072
    package13.cab  OK                            df367ee491b7ec9079e167123ac0d4a4
    package14.cab  OK                            bf882964ed4557b8ac1546596446693f
    package15.cab  OK                            053a043b17277621a8ad423b3cef3e28
    package16.cab  OK                            d17019aa3a2d8bf8b0cde407320b3b5d
    package17.cab  OK                            a5e9e40f3606c21b1c3c01d3bcd74cea
    package18.cab  OK                            606375e2fd92132b0b2e335075a561fd
    package19.cab  OK                            40d20af34d0e6a3751cd572ae3296bae
    package20.cab  OK                            73b533405d21623809a94687ff82f0f3
    package21.cab  OK                            bc8e73d331e4066e5a23449244839339
    package22.cab  OK                            7b2b15c6171fe7784b606590ce0eb97c
    package23.cab  OK                            8210ff967d7f721fd5bbb03b5b056ad0
    package24.cab  OK                            43d464867ba4a6a2e63964992bb1822d
    package25.cab  OK                            9adf7bc2ccd5c39241192fa87eac058b
    package26.cab  OK                            de0d2b053a7adb53d56e7a1bea2b454b
    package27.cab  OK                            1963f03520d33eca52fa496dfb328c5f
    package28.cab  OK                            b5a3cd6436728a47d8049f23d904d174
    package29.cab  OK                            ce06c65e46a02cb54d0dfb07abb562b6
    package30.cab  OK                            f2f1f8cd8f9e9e47f78b2566fdb4785c
    package31.cab  OK                            eafe03f304ae9a850b2986d703448a49
    package32.cab  OK                            5b2b6c1bdfc9f192d33c67555014d176
    package33.cab  OK                            0865cd229c9092b83390ee4b80cfd3da
    package34.cab  OK                            b7788e1215d281cc069670f5d45985cc
    package35.cab  OK                            b82fe757de95aced8e41ca79db08f460
    package36.cab  OK                            70928874dec242b8daf821f4bab7d56d
    package37.cab  OK                            7e63ed0ebc979b35fcce7ef3566ba36f
    package38.cab  OK                            3065ec8b2f3678b9accb7ef26694bd9a
    package39.cab  OK                            8531a95049406c30f310e49aad8d42ba
    package40.cab  OK                            7ebb921d75c50e6f4f826741e8126a09
    package41.cab  OK                            de7261f8d70c6d4d516eeb4dd9eacc61
    package42.cab  OK                            8a0ec2fe99573402935d457de4d873f2
    package43.cab  OK                            29547f67da39b8b9f9bb8eac2e89e6d3
    package44.cab  OK                            dfaeb5d16a31fdd72f83089d30e7fd80
    package45.cab  OK                            ace35ffcaafe25059d76dc10fcc59315
    package46.cab  OK                            cd5dad0f47c4bcc68d6a05bb480f9709
    package47.cab  OK                            fa16cf9109ecec04d0e7db825fef2573
    package48.cab  OK                            c6e1595c979c8c21f6c1dd2a2b5ce389
    package49.cab  failed (checksum error)
    package50.cab  failed (checksum error)
    package51.cab  failed (checksum error)
    package52.cab  failed (checksum error)
    package53.cab  failed (checksum error)
    package54.cab  failed (checksum error)
    package55.cab  failed (checksum error)
    package56.cab  failed (checksum error)
    package57.cab  failed (checksum error)
    package58.cab  failed (checksum error)
    package59.cab  failed (checksum error)
    package60.cab  failed (checksum error)
    package61.cab  failed (checksum error)
    package62.cab  failed (checksum error)
    package63.cab  failed (checksum error)

  All done, errors in processing 15 file(s)


  The download part of WSUS Offline Update only uses the second file in
  this archive, package.cab, and this file seems to be okay. This could
  explain, why even a damaged archive wsusscn2.cab seems to work fine
  for the download part of WSUS Offline Update: The file package.cab (and
  then package.xml) can still be extracted and used for the calculation
  of superseded and dynamic downloads. But the installation will probably
  fail, if the file wsusscn2.cab is damaged.

  Security updates can be verified by comparing the SHA-1 hashes, which
  are embedded into the filenames, with the values, which are calculated
  by hashdeep.


- The download script caches the file package.xml.

  This was once suggested by "Schrabs" in
  http://forums.wsusoffline.net/viewtopic.php?f=5&t=5290&start=10#p17632 .

  The file package.xml is only extracted from the cabinet file
  wsusscn2.cab, if this file changes. Otherwise, a cached copy of the
  file package.xml in the new directory wsusoffline/cache will be used.

  The file package.xml contains just one long line without any line
  breaks. This is the most compact form of XML files and similar formats
  like JSON. In this form, it can be parsed by applications, but it cannot
  be displayed in a text editor nor searched with grep. For convenience,
  the script also creates a pretty-printed copy of the file with the
  name package-formated.xml. This is mostly for development, though.


- The same_day function uses three different time intervals for different
  tasks.

  The same_day function is used to prevent a repeated evaluation of
  the same tasks in adjacent runs of the download script. For example,
  the directory client/win contains common downloads for all Windows
  versions. Similarly, the directory client/ofc contains common files
  for all Office versions. If different Windows or Office versions are
  downloaded in turn, then the downloads for win and ofc should only be
  processed once.

  The same_day function uses timestamp files, to keep track of the
  downloads, which have already been done. The file modification date
  of the timestamp file is then compared to the current date.

  The first implementation of the same_day function used the output of the
  command "date" in the form "2017-05-09", which is known as ISO 8601 (
  https://xkcd.com/1179/ ). If the file modification date of the timestamp
  file and the current date were on the same day, then the same_day
  function returned "true" and the download task would be skipped.

  The next implementation in version 1.0-beta-2 actually calculated
  the time difference in seconds. The same_day function returned true,
  if the difference between the file modification date and the current
  date was less than 24 hours.

  This approach has now been improved: the same_day function uses three
  different time intervals for different tasks:

  1. The four virus definition files change every two hours. It may
     be useful, to check these files more often, for example every
     four hours.

  2. Configuration files are checked once daily as before. This includes
     new versions of WSUS Offline Update and the Linux scripts, updates
     of the configuration files for WSUS Offline Update, and the WSUS
     catalog files wsusscn2.cab.

     If these configuration files change, then most or all of the
     remaining updates will be rescheduled by deleting their timestamp
     files.

  3. The remaining updates all depend on the configuration files. If the
     configuration files don't change, then these updates cannot change
     either. These are the updates for Windows, Office, .Net frameworks,
     and Visual C++ runtime libraries.

     The time interval for these dependent updates is set to a safe value
     of two days.

     Actually, these updates could be postponed forever. They will
     be rescheduled immediately, if one of the configuration files
     changes. This would result in an event-driven evaluation of the
     updates, rather then recalculating everything everyday.


  As "mani" pointed out in
  http://forums.wsusoffline.net/viewtopic.php?f=9&t=6180&start=10#p22502
  , the time interval for "one day" should not be exactly 24 hours,
  but slightly less.

  The interval length must take into account the time needed to process
  the task: check the consistency of existing downloads, calculate static
  and dynamic download links, fetch all files (if they don't exist yet),
  and calculate new hashes for the download directory. The timestamp
  will be updated after successfully completing the task.

  An initial download, for example of the Windows 10 updates,
  may take several hours, depending on the speed of the Internet
  connection. Therefore, "four hours" are calculated as 3:20 hours,
  "one day" is now 21 hours, and "two days" are 45 hours. Of course,
  these are only guesses, which can be adjusted as needed in the file
  timestamps.bash.


- Languages can be joined to a comma-separated list on the command line.

  One goal in the development of the Linux scripts was to use unified
  language settings: The second parameter should always be a real language
  like "deu" or "enu", and then this language would be used, wherever a
  language selection is needed. This worked well for a single language,
  but if several languages were needed, they had to be downloaded in turn.

  In this version, language parameters can be linked to a comma-separated
  list. Instead of:

  ./download-updates.bash w60 deu
  ./download-updates.bash w60 enu

  you can simply write:

  ./download-updates.bash w60 deu,enu


  This makes the processing of Windows 7, Windows Server 2008 and 2008
  R2, .NET Frameworks and Microsoft Security Essentials much faster,
  because it avoids unnecessary iterations of these tasks.

  The downloads for Microsoft Office are still calculated separately
  for each language, and they won't gain the same acceleration.

  The general approach to language settings stays the same: there is
  no distinction between default languages, custom languages and update
  languages. Only languages, which are given on the command-line, will
  be included.

  Unfortunately, the setup script update-generator.bash doesn't
  support multiple selections yet. It uses the built-in command
  "select" of the bash to create simple dialogs, but these dialogs
  don't allow multiple selections. This may be implemented later
  with "dialog", as once suggested for the old Linux scripts (
  http://forums.wsusoffline.net/viewtopic.php?f=9&t=4061 ).

  See the example script get-all-updates.bash for more examples. It is
  meant as a template for customization.


- Windows Vista was removed from selection dialogs.

  Windows Vista is no longer supported by Microsoft, and so the
  support for Vista was removed in WSUS Offline Update changeset 869 (
  http://trac.wsusoffline.net/changeset/869 ).

  Windows Server 2008 is still supported, in both 32-bit and 64-bit
  versions.

  Therefore, the download part of WSUS Offline Update didn't really
  change much: The selections for w60 and w60-x64 are still there,
  but they now refer to Windows Server 2008 only.

  Most changes will be in the installation part of WSUS Offline Update:
  The application UpdateInstaller.exe distinguishes between all supported
  Windows versions, and it won't probably support Vista any longer.

  If you like to get the latest available updates for Windows Vista,
  you can combine this version of the Linux scripts with WSUS Offline
  Update 10.9.2 and just select "Windows Server 2008" from the selection
  dialog. Then you should save the wsusoffline installation, or at least
  the client directory, to a tar archive, to preserve the current state.

  For a short time, the available updates for Windows Vista and Server
  2008 may stay the same. Windows Server 2008 will continue to get new
  updates, but these may not be installable on Vista anymore. New updates
  may still replace (supersede) old updates, and then some updates,
  which could be installed on Windows Vista, might be missing.

  This would be a similar situation as with Windows XP: The embedded
  version of Windows XP still gets updates, but they can't be installed in
  a regular Windows XP Home Edition or Windows XP Professional. Still,
  these updates for Windows XP embedded replace the updates for the
  regular versions, so that these updates are now missing. They are still
  available on the server, but WSUS Offline Update with its calculation
  of superseded updates may not download them anymore.


- unzip is copied to the client directory.

  unzip.exe is copied from the directory ../bin/ to ../client/bin/,
  because it is needed for the installation of two updates
  for Windows 7. This was pointed out by "wuttztfz" in
  http://forums.wsusoffline.net/viewtopic.php?f=9&t=6627 .


- Added support for .Net Framework 4.7.
